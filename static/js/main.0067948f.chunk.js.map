{"version":3,"sources":["WeatherWatch/ApiClient/ApiClient.js","WeatherWatch/Cards/Cards.js","WeatherWatch/WeatherWatch.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","status","response","Promise","resolve","reject","Error","statusText","fetchWeatherApi","location","getRequest","alert","url","axios","get","then","catch","error","console","WeeklyCard","props","date","dateWeekday","Date","parseInt","toLocaleDateString","weekday","dateDay","day","toString","match","dateMonth","month","icon","description","minTemp","maxTemp","humidity","windSpeed","sunrise","toLocaleTimeString","sunset","Card","className","style","width","minHeight","textAlign","marginTop","border","borderRadius","Header","Body","backgroundColor","textTransform","src","alt","WeatherWatch","useState","setLocation","currentWeather","setCurrentWeather","dailyWeather","setDailyWeather","apiClient","createCards","slice","map","current","i","Col","CardGroup","Cards","dt","weather","temp","min","max","wind_speed","fetchData","daily","updateWeather","data","useEffect","Navbar","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","to","onClick","Container","path","Row","disable_box_shadow","fontWeight","fontSize","exact","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0067948f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport class ApiClient {\r\n    status = (response) => {\r\n        if (response.status >= 200 && response.status < 300) {\r\n            return Promise.resolve(response);\r\n        } else {\r\n            return Promise.reject(new Error(response.statusText));\r\n        }\r\n    };\r\n\r\n    fetchWeatherApi = (location) => {\r\n        if (location === \"London\") {\r\n            return this.getRequest(\r\n                `https://api.openweathermap.org/data/2.5/onecall?lat=51.5074&lon=0.1278&units=metric&exclude=hourly,minutely&appid=ed18e45826554b0f52007a1992b575df`\r\n            );\r\n        } else if (location === \"Sheffield\") {\r\n            return this.getRequest(\r\n                `https://api.openweathermap.org/data/2.5/onecall?lat=53.3811&lon=1.4701&units=metric&exclude=hourly,minutely&appid=ed18e45826554b0f52007a1992b575df`\r\n            );\r\n        } else if (location === \"Luton\") {\r\n            return this.getRequest(\r\n                `https://api.openweathermap.org/data/2.5/onecall?lat=51.8787&lon=0.4200&units=metric&exclude=hourly,minutely&appid=ed18e45826554b0f52007a1992b575df`\r\n            );\r\n        } else {\r\n            alert(`That location is not supported.`);\r\n        }\r\n    };\r\n\r\n    getRequest = (url) => {\r\n        return axios\r\n            .get(url)\r\n            .then(this.status)\r\n            .catch(function (error) {\r\n                console.error(error);\r\n                alert(error);\r\n            });\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nconst WeeklyCard = (props) => {\r\n    const dateWeekday = new Date(\r\n        parseInt(props.date) * 1000\r\n    ).toLocaleDateString(\"en-GB\", {\r\n        weekday: \"short\",\r\n    });\r\n    const dateDay = fixDate(\r\n        new Date(parseInt(props.date) * 1000).toLocaleDateString(\"en-GB\", {\r\n            day: \"numeric\",\r\n        })\r\n    );\r\n    const dateMonth = new Date(parseInt(props.date) * 1000).toLocaleDateString(\r\n        \"en-GB\",\r\n        {\r\n            month: \"short\",\r\n        }\r\n    );\r\n    const icon = `http://openweathermap.org/img/wn/${props.icon}@2x.png`;\r\n    const description = props.description;\r\n    const minTemp = props.minTemp;\r\n    const maxTemp = props.maxTemp;\r\n    const humidity = props.humidity;\r\n    const windSpeed = props.windSpeed;\r\n    const sunrise = new Date(\r\n        parseInt(props.sunrise) * 1000\r\n    ).toLocaleTimeString();\r\n    const sunset = new Date(parseInt(props.sunset) * 1000).toLocaleTimeString();\r\n\r\n    function fixDate(date) {\r\n        if (\r\n            date.toString().match(/.*[1]$/g) &&\r\n            !date.toString().match(/.*[11]$/g)\r\n        ) {\r\n            return `${date}st`;\r\n        } else if (\r\n            date.toString().match(/.*[2]$/g) &&\r\n            !date.toString().match(/.*[12]$/g)\r\n        ) {\r\n            return `${date}nd`;\r\n        } else if (\r\n            date.toString().match(/.*[3]$/g) &&\r\n            !date.toString().match(/.*[13]$/g)\r\n        ) {\r\n            return `${date}rd`;\r\n        } else {\r\n            return `${date}th`;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                className=\"pt-5 pt-md-0\"\r\n                style={{\r\n                    width: \"250px\",\r\n                    minHeight: \"500px\",\r\n                    textAlign: \"center\",\r\n                    marginTop: \"100px\",\r\n                    border: \"5px solid white\",\r\n                    borderRadius: \"10px\",\r\n                }}\r\n            >\r\n                <Card.Header className=\"bg-primary\">\r\n                    <h3>\r\n                        {dateWeekday} {dateDay} {dateMonth}\r\n                    </h3>\r\n                </Card.Header>\r\n                <Card.Body\r\n                    className=\"justify-content-center\"\r\n                    style={{\r\n                        backgroundColor: \"lightblue\",\r\n                    }}\r\n                >\r\n                    <p\r\n                        style={{\r\n                            textTransform: \"capitalize\",\r\n                        }}\r\n                    >\r\n                        <img src={icon} alt={description} />\r\n                        <br />\r\n                        {description}\r\n                    </p>\r\n                    <p>\r\n                        <b>Min Temp: </b>\r\n                        {minTemp}°C\r\n                    </p>\r\n                    <p>\r\n                        <b>Max Temp: </b>\r\n                        {maxTemp}°C\r\n                    </p>\r\n                    <p>\r\n                        <b>Humidity: </b>\r\n                        {humidity}%\r\n                    </p>\r\n                    <p>\r\n                        <b>Wind Speed: </b>\r\n                        {windSpeed}mph\r\n                    </p>\r\n                    <p>\r\n                        <b>Sunrise: </b>\r\n                        {sunrise}\r\n                    </p>\r\n                    <p>\r\n                        <b>Sunset: </b>\r\n                        {sunset}\r\n                    </p>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeeklyCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { ApiClient } from \"./ApiClient/ApiClient\";\r\nimport Cards from \"./Cards/Cards\";\r\n\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport CardGroup from \"react-bootstrap/CardGroup\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport ReactCardCarousel from \"react-card-carousel\";\r\n\r\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nconst WeatherWatch = () => {\r\n    const [location, setLocation] = useState(`Luton`);\r\n    const [currentWeather, setCurrentWeather] = useState([]);\r\n    const [dailyWeather, setDailyWeather] = useState([]);\r\n    const apiClient = new ApiClient();\r\n\r\n    const createCards = () => {\r\n        return dailyWeather.slice(0, 7).map((current, i) => (\r\n            <Col key={i}>\r\n                <CardGroup>\r\n                    <Cards\r\n                        date={current.dt}\r\n                        icon={current.weather[0].icon}\r\n                        description={current.weather[0].description}\r\n                        minTemp={current.temp.min}\r\n                        maxTemp={current.temp.max}\r\n                        humidity={current.humidity}\r\n                        windSpeed={current.wind_speed}\r\n                        sunrise={current.sunrise}\r\n                        sunset={current.sunset}\r\n                    />\r\n                </CardGroup>\r\n            </Col>\r\n        ));\r\n    };\r\n\r\n    const updateWeather = (response, location) => {\r\n        setLocation(location);\r\n        setCurrentWeather(response.current);\r\n        setDailyWeather(response.daily);\r\n    };\r\n\r\n    const fetchData = (location) => {\r\n        apiClient.fetchWeatherApi(location).then((response) => {\r\n            updateWeather(response.data, location);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData(\"Luton\");\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <Router>\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand>Weather Watch</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Link\r\n                            to=\"/Luton\"\r\n                            className=\"nav-link text-danger\"\r\n                            onClick={() => fetchData(\"Luton\")}\r\n                        >\r\n                            Luton\r\n                        </Link>\r\n                        <Link\r\n                            to=\"/London\"\r\n                            className=\"nav-link text-danger\"\r\n                            onClick={() => fetchData(\"London\")}\r\n                        >\r\n                            London\r\n                        </Link>\r\n                        <Link\r\n                            to=\"/Sheffield\"\r\n                            className=\"nav-link text-danger\"\r\n                            onClick={() => fetchData(\"Sheffield\")}\r\n                        >\r\n                            Sheffield\r\n                        </Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <Container>\r\n                <Switch>\r\n                    <Route path=\"/Luton\">\r\n                        <div className=\"header\">\r\n                            <h1\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    marginTop: \"20px\",\r\n                                }}\r\n                            >\r\n                                {location}{\" \"}\r\n                                <span className=\"header-info\">\r\n                                    (currently {currentWeather.temp}\r\n                                    °C)\r\n                                </span>\r\n                            </h1>\r\n                        </div>\r\n                        <Row>\r\n                            <ReactCardCarousel disable_box_shadow={true}>\r\n                                {createCards()}\r\n                            </ReactCardCarousel>\r\n                        </Row>\r\n                    </Route>\r\n                    <Route path=\"/London\">\r\n                        <div id=\"header\">\r\n                            <h1\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    marginTop: \"20px\",\r\n                                }}\r\n                            >\r\n                                {location}{\" \"}\r\n                                <span\r\n                                    style={{\r\n                                        fontWeight: \"normal\",\r\n                                        fontSize: \"2rem\",\r\n                                    }}\r\n                                >\r\n                                    (currently {currentWeather.temp}\r\n                                    °C)\r\n                                </span>\r\n                            </h1>\r\n                        </div>\r\n                        <Row>\r\n                            <ReactCardCarousel disable_box_shadow={true}>\r\n                                {createCards()}\r\n                            </ReactCardCarousel>\r\n                        </Row>\r\n                    </Route>\r\n                    <Route path=\"/Sheffield\">\r\n                        <div id=\"header\">\r\n                            <h1\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    marginTop: \"20px\",\r\n                                }}\r\n                            >\r\n                                {location}{\" \"}\r\n                                <span\r\n                                    style={{\r\n                                        fontWeight: \"normal\",\r\n                                        fontSize: \"2rem\",\r\n                                    }}\r\n                                >\r\n                                    (currently {currentWeather.temp}\r\n                                    °C)\r\n                                </span>\r\n                            </h1>\r\n                        </div>\r\n                        <Row>\r\n                            <ReactCardCarousel disable_box_shadow={true}>\r\n                                {createCards()}\r\n                            </ReactCardCarousel>\r\n                        </Row>\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <div id=\"header\">\r\n                            <h1\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    marginTop: \"20px\",\r\n                                }}\r\n                            >\r\n                                {location}{\" \"}\r\n                                <span\r\n                                    style={{\r\n                                        fontWeight: \"normal\",\r\n                                        fontSize: \"2rem\",\r\n                                    }}\r\n                                >\r\n                                    (currently {currentWeather.temp}\r\n                                    °C)\r\n                                </span>\r\n                            </h1>\r\n                        </div>\r\n                        <Row>\r\n                            <ReactCardCarousel disable_box_shadow={true}>\r\n                                {createCards()}\r\n                            </ReactCardCarousel>\r\n                        </Row>\r\n                    </Route>\r\n                    <Route path=\"/\">That location is not supported.</Route>\r\n                </Switch>\r\n            </Container>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default WeatherWatch;\r\n","import WeatherWatch from \"./WeatherWatch/WeatherWatch.js\";\nimport \"./App.css\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <WeatherWatch />\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}